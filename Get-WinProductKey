<#
.SYNOPSIS
    Decode-Key function to decode the byte array was written by chentiangemalc.
    Slight modification made, & is being used to decode the byte array stored 
    within the DigitalProductId key @ HKLM\SOFTWARE\Microsoft\Windows NT\CurrentFunction.
    Also validates the decoded key against the extracted the partial product key.

.NOTES
    Name: Get-WinProductKey
    Author: Payton Flint, chentiangemalc
    Version: 1.1.0
    DateCreated: 2023-Oct

.LINK
    https://chentiangemalc.wordpress.com/2021/02/23/decode-digitalproductid-registry-keys-to-original-product-key-with-powershell/
#>

Function Decode-Key {
    param(
        [byte[]] $key
    )
 
    $KeyOutput= ""
    $KeyOffset = 52 
     
    $IsWin8 = ([System.Math]::Truncate($key[66] / 6)) -band 1 
    $key[66] = ($key[66] -band 0xF7) -bor (($isWin8 -band 2) * 4) 
    $i = 24 
    $maps = "BCDFGHJKMPQRTVWXY2346789" 
    Do {
        $current= 0 
        $j = 14
        Do {
           $current = $current* 256 
           $current = $Key[$j + $KeyOffset] + $Current 
           $Key[$j + $KeyOffset] = [System.Math]::Truncate($Current / 24 )
           $Current=$Current % 24 
           $j--
        } while ($j -ge 0) 
        $i-- 
        $KeyOutput = $Maps.Substring($Current, 1) + $KeyOutput 
        $last = $current 
    } while ($i -ge 0)
    
    If ($isWin8 -eq 1) { 
        $keypart1 = $KeyOutput.Substring(1,$last)
        $insert = "N"
        If ($keypart1 -eq "") {
            $KeyOutput = $insert
        } Else {
            $KeyOutput = $KeyOutput.Replace($keypart1, $keypart1 + $insert)
        }
        if ($Last -eq 0) {
            $KeyOutput = $insert + $KeyOutput
        }
    }
  
    if ($keyOutput.Length -eq 26){
        $result = [String]::Format("{0}-{1}-{2}-{3}-{4}",
            $KeyOutput.Substring(1, 5),
            $KeyOutput.Substring(6, 5),
            $KeyOutput.Substring(11,5),
            $KeyOutput.Substring(16,5),
            $KeyOutput.Substring(21,5))
    }   
    else{
        $KeyOutput
    }
    return $result
} # end Decode-Key function

# specify the registry key path
$registryPath = "HKLM:\Software\Microsoft\Windows NT\CurrentVersion"

# specify the decoded key length for validation
$keyLength = 29

# get the property value of a specific key
$keyData = $(Get-ItemProperty -Path $registryPath -Name "DigitalProductId").DigitalProductId

# decode the provided key value using the Decode-Key function
$decodedKey = Decode-Key $keyData

# get partial product key, remove empty results and trim
$partProdKey = ((Get-CimInstance -Query 'SELECT PartialProductKey FROM SoftwareLicensingProduct WHERE Name LIKE "Windows%"').PartialProductKey `
 | Where-Object {$_ -notlike ""}).Trim()

# confirm result ends w/ the partial product key
if ($decodedKey -like "*$partProdKey" -and $decodedKey.Length -eq $keyLength) {
    Write-Output $decodedKey
} else {
    Write-Output "Decoded key is the improper length and/or does not end with the extracted partial product key."
}
